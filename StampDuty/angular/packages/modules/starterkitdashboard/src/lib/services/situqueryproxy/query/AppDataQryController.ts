/*** Generated REST client by rest-client-generator*/import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';import { Injectable, Inject } from '@angular/core';import { Store } from '@ngrx/store';import { Observable, pipe } from 'rxjs';import { map, filter } from 'rxjs/operators';import * as fromRoot from 'adk-core';import { ClientFactory, ServiceClient } from 'shared-framework';import { ProxyServiceBase, HttpRequestType, AppSettingConfig, AppSettingsModel, ConfigItem } from 'adk-core';import * as ServiceTypes from './ServiceTypes';import { IAppDataQryController } from './IAppDataQryController';/*** Services stuff.*/@Injectable()export class AppDataQryController  extends ProxyServiceBase<IAppDataQryController> implements IAppDataQryController {    constructor(public store$: Store<fromRoot.State>, public clientFactory: ClientFactory, public serviceClient: ServiceClient, public httpClient: HttpClient, @Inject(AppSettingConfig) public appSettingsConfig: AppSettingsModel) {        super(store$, clientFactory, serviceClient, httpClient, appSettingsConfig);    }    substituteUrl(url: string, values: Object): string {        Object.keys(values).map(key => {          url = url.replace('{' + encodeURIComponent(key) + '}', encodeURIComponent(values[key]));        });        return url;      }    public reportGenerationUsingPost(_request: ServiceTypes.StumpDutySearchVo): Observable<ServiceTypes.SituResponseListReportGenerationVo> {        let _urlpath = this.substituteUrl('/reportgeneration', {  } );                let _requestInput = _request;        let _requestType = HttpRequestType.POST;            const _params = null;            const _body = null;        return this.ExecuteRequestAsync('SituQueryModule_IAppDataQryController', 'reportGenerationUsingPost', _requestInput, _requestType, _params,  _urlpath)        .pipe(        map(response => {            return response;        }));    }    public docInfoUsingPost(_request: ServiceTypes.DocumentInfoVo): Observable<ServiceTypes.SituResponseListDocumentInfoVo> {        let _urlpath = this.substituteUrl('/docinfo', {  } );                let _requestInput = _request;        let _requestType = HttpRequestType.POST;            const _params = null;            const _body = null;        return this.ExecuteRequestAsync('SituQueryModule_IAppDataQryController', 'docInfoUsingPost', _requestInput, _requestType, _params,  _urlpath)        .pipe(        map(response => {            return response;        }));    }    public viewMessageUsingGet(docID: number): Observable<ServiceTypes.SituResponseListSystemMessageVo> {        let _urlpath = this.substituteUrl('/viewmessage/{docID}', { docID: docID } );                let _requestInput = null;        let _requestType = HttpRequestType.GET;            const _params = null;            const _body = null;        return this.ExecuteRequestAsync('SituQueryModule_IAppDataQryController', 'viewMessageUsingGet', _requestInput, _requestType, _params,  _urlpath)        .pipe(        map(response => {            return response;        }));    }    public userDetailUsingGet(): Observable<ServiceTypes.SituResponseAppAccountsDto> {        let _urlpath = this.substituteUrl('/userDetail', {  } );                let _requestInput = null;        let _requestType = HttpRequestType.GET;            const _params = null;            const _body = null;        return this.ExecuteRequestAsync('SituQueryModule_IAppDataQryController', 'userDetailUsingGet', _requestInput, _requestType, _params,  _urlpath)        .pipe(        map(response => {            return response;        }));    }    public getRateConfigurationInfoUsingGet(rateID: number): Observable<ServiceTypes.SituResponseRateConfigurationVo> {        let _urlpath = this.substituteUrl('/getrateconfiguration/{rateID}', { rateID: rateID } );                let _requestInput = null;        let _requestType = HttpRequestType.GET;            const _params = null;            const _body = null;        return this.ExecuteRequestAsync('SituQueryModule_IAppDataQryController', 'getRateConfigurationInfoUsingGet', _requestInput, _requestType, _params,  _urlpath)        .pipe(        map(response => {            return response;        }));    }    public getRateConfigurationInfoListUsingGet(): Observable<ServiceTypes.SituResponseListRateConfigurationVo> {        let _urlpath = this.substituteUrl('/getrateconfiguration/list', {  } );                let _requestInput = null;        let _requestType = HttpRequestType.GET;            const _params = null;            const _body = null;        return this.ExecuteRequestAsync('SituQueryModule_IAppDataQryController', 'getRateConfigurationInfoListUsingGet', _requestInput, _requestType, _params,  _urlpath)        .pipe(        map(response => {            return response;        }));    }    public getGcStampDutyTemplateListUsingGet(): Observable<any> {        let _urlpath = this.substituteUrl('/getgcstampdutytemplate/list', {  } );                let _requestInput = null;        let _requestType = HttpRequestType.GET;            const _params = null;            const _body = null;        return this.ExecuteRequestAsync('SituQueryModule_IAppDataQryController', 'getGcStampDutyTemplateListUsingGet', _requestInput, _requestType, _params,  _urlpath)        .pipe(        map(response => {            return response;        }));    }    public getGcConfigurationInfoUsingGet(gcID: number): Observable<ServiceTypes.SituResponseGroupCompanyVo> {        let _urlpath = this.substituteUrl('/getgcconfiguration/{gcID}', { gcID: gcID } );                let _requestInput = null;        let _requestType = HttpRequestType.GET;            const _params = null;            const _body = null;        return this.ExecuteRequestAsync('SituQueryModule_IAppDataQryController', 'getGcConfigurationInfoUsingGet', _requestInput, _requestType, _params,  _urlpath)        .pipe(        map(response => {            return response;        }));    }    public getGroupCompanyListUsingGet(): Observable<any> {        let _urlpath = this.substituteUrl('/getgcconfiguration/list', {  } );                let _requestInput = null;        let _requestType = HttpRequestType.GET;            const _params = null;            const _body = null;        return this.ExecuteRequestAsync('SituQueryModule_IAppDataQryController', 'getGroupCompanyListUsingGet', _requestInput, _requestType, _params,  _urlpath)        .pipe(        map(response => {            return response;        }));    }}