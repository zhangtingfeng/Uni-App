/*** Generated REST client by rest-client-generator*/import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';import { Injectable, Inject } from '@angular/core';import { Store } from '@ngrx/store';import { Observable, pipe } from 'rxjs';import { map, filter } from 'rxjs/operators';import * as fromRoot from 'adk-core';import { ClientFactory, ServiceClient } from 'shared-framework';import { ProxyServiceBase, HttpRequestType, AppSettingConfig, AppSettingsModel, ConfigItem } from 'adk-core';import * as ServiceTypes from './ServiceTypes';import { IAppDownloadDataQryController } from './IAppDownloadDataQryController';/*** Services stuff.*/@Injectable()export class AppDownloadDataQryController  extends ProxyServiceBase<IAppDownloadDataQryController> implements IAppDownloadDataQryController {    constructor(public store$: Store<fromRoot.State>, public clientFactory: ClientFactory, public serviceClient: ServiceClient, public httpClient: HttpClient, @Inject(AppSettingConfig) public appSettingsConfig: AppSettingsModel) {        super(store$, clientFactory, serviceClient, httpClient, appSettingsConfig);    }    substituteUrl(url: string, values: Object): string {        Object.keys(values).map(key => {          url = url.replace('{' + encodeURIComponent(key) + '}', encodeURIComponent(values[key]));        });        return url;      }    public downloadSourceFileUsingPost(_request: ServiceTypes.DocumentInfoVo): Observable<any> {        let _urlpath = this.substituteUrl('/downloadsourcefile', {  } );                let _requestInput = _request;        let _requestType = HttpRequestType.POST;            const _params = null;            const _body = null;        return this.ExecuteRequestAsync('SituQueryModule_IAppDownloadDataQryController', 'downloadSourceFileUsingPost', _requestInput, _requestType, _params,  _urlpath)        .pipe(        map(response => {            return response;        }));    }    public downloadReportUsingPost(_request: ServiceTypes.StumpDutySearchVo): Observable<any> {        let _urlpath = this.substituteUrl('/downloadreport', {  } );                let _requestInput = _request;        let _requestType = HttpRequestType.POST;            const _params = null;            const _body = null;        return this.ExecuteRequestAsync('SituQueryModule_IAppDownloadDataQryController', 'downloadReportUsingPost', _requestInput, _requestType, _params,  _urlpath)        .pipe(        map(response => {            return response;        }));    }    public downloadDefaultReportUsingPost(_request: ServiceTypes.StumpDutySearchVo): Observable<any> {        let _urlpath = this.substituteUrl('/downloaddefaultreport', {  } );                let _requestInput = _request;        let _requestType = HttpRequestType.POST;            const _params = null;            const _body = null;        return this.ExecuteRequestAsync('SituQueryModule_IAppDownloadDataQryController', 'downloadDefaultReportUsingPost', _requestInput, _requestType, _params,  _urlpath)        .pipe(        map(response => {            return response;        }));    }    public downloadSourceFile1UsingGet(docID: number): Observable<any> {        let _urlpath = this.substituteUrl('/downloadsourcefile/{docID}', { docID: docID } );                let _requestInput = null;        let _requestType = HttpRequestType.GET;            const _params = null;            const _body = null;        return this.ExecuteRequestAsync('SituQueryModule_IAppDownloadDataQryController', 'downloadSourceFile1UsingGet', _requestInput, _requestType, _params,  _urlpath)        .pipe(        map(response => {            return response;        }));    }}