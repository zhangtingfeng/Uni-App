<template>
	<view>
		<page-head :title="title"></page-head>



		<!--<view class="uni-padding-wrap uni-common-mt">
			<view class="uni-title">{{fixRandom.name}}%</view>
			<view>
				<slider-range :value="rangeValue" :min="rangeMin" :max="rangMax" :step="1" :bar-height="3"
					:block-size="26" background-color="#EEEEF6" active-color="#FF6B00" :format="format"
					:decorationVisible="true" @change="handleRangeChange"></slider-range>
			</view>
		</view>-->
		<view class="uni-padding-wrap uni-common-mt">
			<view class="uni-title">{{fixhowmanypeopleoneGroup.name}}</view>
			<view>
				<slider step="1" @change="sliderChangefixoneGroup" show-value min="2" max="5"
					:value="fixhowmanypeopleoneGroup.value" />
			</view>
		</view>

		<view class="uni-list-cell uni-list-cell-pd" v-for="(CustomeDictionary,index) in CustomeDictionarylist">
			<view class="uni-padding-wrap uni-common-mt">
				<view class="uni-title">
					<input class="uni-input" type="text" v-model="CustomeDictionary.name"
						placeholder="请修改，例如进攻，防守，不用值设为0" />

				</view>
				<view>
					<slider step="0.01" @change="sliderChangecustom($event,index)" show-value min="0" max="1"
						:value="CustomeDictionary.value" />
				</view>
			</view>
		</view>

		<view class="uni-btn-v">
			<button type="primary" @click="save">save</button>
			<button type="primary" @click="add">add</button>
		</view>
	</view>
</template>

<script>
	import SliderRange from '../../../components/primewind-sliderrange/components/primewind-sliderrange/index.vue'

	export default {
		components: {
			SliderRange
		},
		onLoad: function(option) { //option为object类型，会序列化上个页面传递的参数
			console.log("load"); //打印出上个页面传递的参数。
		},
		props: {
			hasLeftWin: {
				type: Boolean
			},
			leftWinActive: {
				type: String
			}
		},
		data() {
			return {
				rangeMin: 30,
				rangMax: 200,
				rangeValue: [80, 120],
				uniapiSuccess: 0,
				title: '各分项和相应权重值的乘积的综合即队员的综合分',
				hideList: [
					'ucharts',
					'nav-city-dropdown'
				],

				fixRandom: {
					"type": "fix",
					"name": "发挥率",
					"value": "0.8"
				},
				fixhowmanypeopleoneGroup: {
					"type": "fix",
					"name": "几人一组",
					"value": "4"
				},
				CustomeDictionarylist: [],
				list: [
					// #ifdef APP-PLUS || H5 || MP-ALIPAY
					{
						id: 'navbar',
						name: '顶部原生导航标题栏',
						open: false,
						pages: [
							// #ifdef APP-PLUS || H5
							{
								name: '导航栏带自定义按钮',
								url: 'nav-button'
							},
							{
								name: '导航栏带红点和角标',
								url: 'nav-dot'
							},
							{
								name: '导航栏带城市选择',
								url: 'nav-city-dropdown'
							},
							{
								name: '导航栏带搜索框',
								url: 'nav-search-input'
							},
							// #endif
							// #ifdef APP-PLUS || H5 || MP-ALIPAY
							{
								name: '透明渐变样式',
								url: 'nav-transparent'
							},
							{
								name: '导航栏带图片',
								url: 'nav-image'
							}
							// #endif
						]
					},
					// #endif
					// #ifndef QUICKAPP-WEBVIEW || MP-KUAISHOU
					{
						name: '顶部选项卡',
						url: 'tabbar'
					},
					// #endif
					{
						name: '组件通讯',
						url: 'component-communication'
					},
					// #ifndef MP-QQ || QUICKAPP-WEBVIEW
					// {
					// 	name: 'uCharts 图表',
					// 	url: 'ucharts'
					// },
					// #endif
					// #ifndef QUICKAPP-WEBVIEW
					{
						name: '列表到详情示例',
						url: 'list2detail-list'
					},
					// #endif
					// #ifndef VUE3
					// #ifdef APP-PLUS
					// {
					// 	name: '上下滑动切换视频',
					// 	url: 'swiper-vertical'
					// },
					// #endif
					// #endif
					// #ifdef APP-NVUE
					{
						name: 'swiper-list',
						url: 'swiper-list-nvue'
					},
					// #endif
					{
						name: 'GlobalData和vuex',
						url: 'global'
					},
					// #ifdef APP-PLUS
					{
						name: '问题反馈',
						url: '/platforms/app-plus/feedback/feedback'
					},
					{
						name: '打开外部应用',
						url: 'scheme'
					},
					// #endif
					// #ifdef APP-PLUS || MP-WEIXIN || MP-QQ || H5
					// {
					// 	name: '微信自定义组件示例（vant ui）',
					// 	url: 'vant-button'
					// }
					// #endif
				]
			}
		},
		onShareAppMessage() {
			return {
				title: '欢迎体验uni-app',
				path: '/pages/tabBar/template/template'
			}
		},
		onNavigationBarButtonTap(e) {
			uni.navigateTo({
				url: '/pages/about/about'
			});
		},
		// #ifdef H5
		watch: {
			uniapiSuccess(newName, oldName) {
				console.log("uniapiSuccess=" + newName);
			},
			$route: {
				immediate: true,
				handler(newRoute) {
					if (newRoute.matched.length) {
						let path = newRoute.path.split('/')[3]
						for (const item of this.list) {
							if (Array.isArray(item.pages)) {
								for (const page of item.pages) {
									if (page === path || page.url && page.url === path) {
										item.open = true
									}
								}
							}
						}
					}
				}
			}
		},
		// #endif
		methods: {
			onLoad: function(option) { //option为object类型，会序列化上个页面传递的参数

				let letthis = this;
				let leturl ="";
				/*leturl= "/api/dictionary/list/" + letthis.fixRandom.type + "/" + letthis.fixRandom.name;
				console.log("this leturl" + leturl);
				uni.request({
					url: leturl,
					success: (res) => {
						if (res.data.length > 0) {
							letthis.fixRandom = res.data[0];
							letthis.rangeValue= JSON.parse(letthis.fixRandom.value);
							console.log("this start.fixRandom" + JSON.stringify(letthis.fixRandom));
						}
					},
					fail: (err) => {
						console.error(err);
					},
				});*/

				leturl = "/api/dictionary/list/" + letthis.fixhowmanypeopleoneGroup.type + "/" + letthis
					.fixhowmanypeopleoneGroup.name;
				console.log("this leturl" + leturl);
				uni.request({
					url: leturl,
					success: (res) => {
						if (res.data.length > 0) {
							letthis.fixhowmanypeopleoneGroup = res.data[0];
							console.log("this start.fixhowmanypeopleoneGroup" + JSON.stringify(letthis
								.fixhowmanypeopleoneGroup));
						}
					},
					fail: (err) => {
						console.error(err);
					},
				});


				leturl = "/api/dictionary/list/Custome";
				console.log("this leturl" + leturl);
				uni.request({
					url: leturl,
					success: (res) => {
						//debugger;
						if (res.data.length > 0) {
							letthis.CustomeDictionarylist = res.data;
							//console.log("this start.fixRandom" + JSON.stringify(letthis.fixRandom));
						}
					},
					fail: (err) => {
						console.error(err);
					},
				});
			},
			add(e) {
				this.CustomeDictionarylist.push({
					"type": "Custome",
					"name": "",
					"value": "0"
				});
				console.log('add 发生变化：' + e.detail.value)
			},
			save(e) {

				let letthis = this;
				letthis.uniapiSuccess = 0;
				
				/*letthis.fixRandom.value=JSON.stringify(letthis.rangeValue);
				console.log("this  before.fixRandom" + JSON.stringify(this.rangeValue));
				
				uni.request({
					url: '/api/dictionary/save',
					method: 'POST',
					data: letthis.fixRandom,
					success(res) {
						//debugger;
						letthis.fixRandom = res.data;
						letthis.rangeValue= JSON.parse(letthis.fixRandom.value);
						console.log("this after.res.data" + JSON.stringify(res.data));
						console.log("letthis after.fixRandom" + JSON.stringify(letthis.fixRandom));

						letthis.uniapiSuccess = letthis.uniapiSuccess + 1;

					},
					fail(err) {
						console.log('获取fixRandomopenid失败：', err);
					}
				})*/

				uni.request({
					url: '/api/dictionary/save',
					method: 'POST',
					data: letthis.fixhowmanypeopleoneGroup,
					success(res) {
						//debugger;
						letthis.fixhowmanypeopleoneGroup = res.data;
						console.log("this after.res.data" + JSON.stringify(res.data));
						console.log("letthis after.fixhowmanypeopleoneGroup" + JSON.stringify(letthis
							.fixhowmanypeopleoneGroup));

						letthis.uniapiSuccess = letthis.uniapiSuccess + 1;

					},
					fail(err) {
						console.log('获取fixhowmanypeopleoneGroupopenid失败：', err);
					}
				})


				uni.request({
					url: '/api/dictionary/saveAll',
					method: 'POST',
					data: letthis.CustomeDictionarylist,
					success(res) {
						//debugger;
						letthis.CustomeDictionarylist = res.data;
						console.log("this after.res.data" + JSON.stringify(res.data));
						console.log("letthis after.CustomeDictionarylist" + JSON.stringify(letthis
							.CustomeDictionarylist));

						letthis.uniapiSuccess = letthis.uniapiSuccess + 1;

					},
					fail(err) {
						console.log('获取openid失败：', err);
					}
				})
			},
			sliderChangeTextcustom(e, eindex) {
				debugger;
			},
			sliderChangecustom(e, eindex) {
				this.CustomeDictionarylist[eindex].value = e.detail.value;
				//this.CustomeDictionarylist[eindex]=e.detail.value;
				//debugger;
				console.log('this.CustomeDictionarylist[' + eindex + '] 发生变化：' + e.detail.value)
				//debugger;
				console.log('this.CustomeDictionarylist 发生变化：' + JSON.stringify(this.CustomeDictionarylist));
			},
			/*sliderChangefix(e) {
				this.fixRandom.value = e.detail.value;
				console.log('value 发生变化：' + e.detail.value);
				console.log('this.fixRandom 发生变化：' + JSON.stringify(this.fixRandom));
			},*/
			sliderChangefixoneGroup(e) {
				this.fixhowmanypeopleoneGroup.value = e.detail.value;
				console.log('value 发生变化：' + e.detail.value);
				console.log('this.fixhowmanypeopleoneGroup 发生变化：' + JSON.stringify(this.fixhowmanypeopleoneGroup));
			},

			triggerCollapse(e, id) {
				if (!this.list[e].pages) {
					this.goDetailPage(this.list[e].url);
					return;
				}
				for (var i = 0; i < this.list.length; ++i) {
					if (e === i) {
						this.list[i].open = !this.list[i].open;
					} else {
						this.list[i].open = false;
					}
				}
			},
			goDetailPage(e) {
				let path = e.url ? e.url : e;
				let url = ~path.indexOf('platform') ? path : '/pages/template/' + path + '/' + path;
				if (this.hasLeftWin) {
					uni.reLaunch({
						url: url
					})
				} else {
					uni.navigateTo({
						url: url
					})
				}
				return false;
			},
			format(val) {
				return val + '%'
			},
			handleRangeChange(e) {
				this.rangeValue = e
				console.log(e);
			}
		}
	}
</script>

<style>
	@import '../../../common/uni-nvue.css';

	.page {
		margin-top: 20rpx !important;
		display: flex;
		padding: 30rpx;
		border: 1rpx solid #000;
		background-color: black;
		display: flex;
		justify-content: center;
	}

	.blankAddLine {
		margin-top: 20rpx !important;
	}
</style>
